{"version":3,"sources":["reportWebVitals.js","constants.js","actions.js","api/api.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/CounterButton.js","components/Header.js","components/Scroll.js","components/ErrorBoundry.js","components/MainPage.js","containers/App.js","serviceWorkerRegistration.js","reducers.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","CHANGE_SEARCHFIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","requestRobots","dispatch","link","type","fetch","response","json","data","payload","catch","error","Card","name","email","id","className","alt","src","height","width","maxHeight","maxWidth","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","aria-label","placeholder","onChange","CounterButton","props","state","count","nextProps","nextState","this","color","onClick","setState","Component","Header","Scroll","style","overflow","border","children","ErrorBoundary","hasError","info","MainPage","filterRobots","filter","robot","toLowerCase","includes","searchField","onRequestRobots","onSearchChange","isPending","ErrorBoundry","App","connect","searchRobots","event","text","target","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducers","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.f6467506.chunk.js","sourcesContent":["const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","import { apiCall } from './api/api'\r\nimport {\r\n  CHANGE_SEARCHFIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n } from './constants'\r\n\r\n\r\nexport const setSearchField = (text) => ({ type: CHANGE_SEARCHFIELD, payload: text })\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING })\r\n  apiCall('https://jsonplaceholder.typicode.com/users')\r\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}","export const apiCall = (link) =>\r\n  fetch(link).then(response => response.json())","import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\r\n      <img\r\n        alt='robots'\r\n        src={`https://robohash.org/${id}?size=200x200`}\r\n        height='200px'\r\n        width='200px'\r\n        maxHeight='200px'\r\n        maxWidth='200px'\r\n      />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      {\r\n        robots.map((user, i) => {\r\n          return (\r\n            <Card\r\n              key={i}\r\n              id={robots[i].id}\r\n              name={robots[i].name}\r\n              email={robots[i].email}\r\n              />\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n        aria-label='Search Box'\r\n        id='searchBox'\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search'\r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React, {Component} from 'react';\r\n\r\nclass CounterButton extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      count: 0\r\n    };\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if (this.state.count !== nextState.count) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <button\r\n        id='counter'\r\n        color={this.props.color}\r\n        onClick={() => this.setState(state => ({count: state.count + 1}))}>\r\n        Count: {this.state.count}\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CounterButton","import React, { Component } from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\n// In most cases, instead of writing shouldComponentUpdate()\r\n// by hand, you can inherit from React.PureComponent. It is\r\n// equivalent to implementing shouldComponentUpdate() with a\r\n// shallow comparison of current and previous props and state.\r\n\r\nclass Header extends Component {\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return false;\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1 className='f1'>RoboFriends</h1>\r\n        <CounterButton />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react'\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = { hasError: false }\r\n  }\r\n\r\n  componentDidCatch (error, info) {\r\n    this.setState({ hasError: true })\r\n  }\r\n\r\n  render () {\r\n    if (this.state.hasError) {\r\n      return <h1>Something went wrong.</h1>\r\n    }\r\n    return this.props.children\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary","import React, { Component } from 'react';\r\n\r\nimport CardList from './CardList';\r\nimport SearchBox from './SearchBox';\r\nimport Header from './Header';\r\nimport Scroll from './Scroll';\r\nimport ErrorBoundry from './ErrorBoundry';\r\n\r\nimport './MainPage.css';\r\n\r\nclass MainPage extends Component {\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  filterRobots = () => {\r\n    return this.props.robots.filter((robot) => {\r\n      return robot.name\r\n        .toLowerCase()\r\n        .includes(this.props.searchField.toLowerCase());\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { onSearchChange, isPending } = this.props;\r\n    return (\r\n      <div className='tc'>\r\n        <Header />\r\n        <SearchBox searchChange={onSearchChange} />\r\n        <Scroll>\r\n          {isPending ? (\r\n            <h1>Loading</h1>\r\n          ) : (\r\n            <ErrorBoundry>\r\n              <CardList robots={this.filterRobots()} />\r\n            </ErrorBoundry>\r\n          )}\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// action done from mapDispatchToProps will channge state from mapStateToProps\r\nexport default MainPage;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nimport MainPage from '../components/MainPage';\r\n\r\nimport './App.css';\r\n\r\n// parameter state comes from index.js provider store state(rootReducers)\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n  };\r\n};\r\n\r\n// dispatch the DOM changes to call an action. note mapStateToProps returns object, mapDispatchToProps returns function\r\n// the function returns an object then uses connect to change the data from redecers.\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots()),\r\n  };\r\n};\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <MainPage {...this.props} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// action done from mapDispatchToProps will channge state from mapStateToProps\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n  CHANGE_SEARCHFIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED,\r\n} from './constants';\r\n\r\nconst initialStateSearch = {\r\n  searchField: '',\r\n};\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCHFIELD:\r\n      return Object.assign({}, state, { searchField: action.payload });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialStateRobots = {\r\n  robots: [],\r\n  isPending: false,\r\n};\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, { isPending: true });\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, {\r\n        robots: action.payload,\r\n        isPending: false,\r\n      });\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, { error: action.payload });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport 'tachyons';\n\nimport App from './containers/App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport { requestRobots, searchRobots } from './reducers';\n\nimport './index.css';\n\nconst logger = createLogger();\n\nconst rootReducers = combineReducers({ requestRobots, searchRobots });\n\nconst store = createStore(\n  rootReducers,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorkerRegistration.register();\n\nreportWebVitals();\n"],"sourceRoot":""}